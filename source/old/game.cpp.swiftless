#include "game.hpp"

motor::Game::Game(): background("data/background.png"),	logo("data/logo.png")
{
	loop = true;
}

int motor::Game::main(Window *wndw, Input *inp)
{
	window = wndw;
	input = inp;

	float delta = 0;
	Shader *shader = new Shader();
	shader->init();

	shader->attachVertexShader("data/base.vert");
	shader->attachFragmentShader("data/base.frag");
	shader->compile();
	shader->activate();

	projectionMatrix = glm::perspective(45.0f, float(window->width / window->height), window->near, window->far); 
	viewMatrix = glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, -5.0f));
	modelMatrix = glm::scale(glm::mat4(1.0f), glm::vec3(0.5f));//model matrix, halve size of model

	int projectionMatrixUniform = shader->getUniformLocation("projectionMatrix");
	int viewMatrixUniform = shader->getUniformLocation("viewMatrix");
	int modelMatrixUniform = shader->getUniformLocation("modelMatrix");

	cout << projectionMatrixUniform << " " << viewMatrixUniform << " " << modelMatrixUniform << " " << endl;
	//---------------------------------------------------------------------------------------
	unsigned int vaoID[1];
	unsigned int vboID[1];
	float* vertices = new float[18];  // Vertices for our square

	vertices[0] = -0.5; vertices[1] = -0.5; vertices[2] = 0.0; // Bottom left corner
	vertices[3] = -0.5; vertices[4] = 0.5; vertices[5] = 0.0; // Top left corner
	vertices[6] = 0.5; vertices[7] = 0.5; vertices[8] = 0.0; // Top Right corner

	vertices[9] = 0.5; vertices[10] = -0.5; vertices[11] = 0.0; // Bottom right corner
	vertices[12] = -0.5; vertices[13] = -0.5; vertices[14] = 0.0; // Bottom left corner
	vertices[15] = 0.5; vertices[16] = 0.5; vertices[17] = 0.0; // Top Right corner

	glGenVertexArrays(1, &vaoID[0]); // Create our Vertex Array Object
	glBindVertexArray(vaoID[0]); // Bind our Vertex Array Object so we can use it

	glGenBuffers(1, vboID); // Generate our Vertex Buffer Object
	glBindBuffer(GL_ARRAY_BUFFER, vboID[0]); // Bind our Vertex Buffer Object
	glBufferData(GL_ARRAY_BUFFER, 18 * sizeof(GLfloat), vertices, GL_STATIC_DRAW); // Set the size and data of our VBO and set it to STATIC_DRAW

	glVertexAttribPointer((GLuint)0, 3, GL_FLOAT, GL_FALSE, 0, 0); // Set up our vertex attributes pointer

	glEnableVertexAttribArray(0); // Disable our Vertex Array Object
	glBindVertexArray(0); // Disable our Vertex Buffer Object

	delete [] vertices;
	//---------------------------------------------------------------------------------------
	
	while(loop)
	{
		input->update(window);
		if(input->quit())
			return 0;
		delta += 0.021f;

		glUniformMatrix4fv(projectionMatrixUniform, 1, GL_FALSE, glm::value_ptr(projectionMatrix));
		glUniformMatrix4fv(viewMatrixUniform, 1, GL_FALSE, glm::value_ptr(viewMatrix));
		glUniformMatrix4fv(modelMatrixUniform, 1, GL_FALSE, glm::value_ptr(modelMatrix));

		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		//glLoadIdentity();

//		glBindVertexArray(vaoID[0]);
//		glDrawArrays(GL_TRIANGLES, 0, 6);
//		glBindVertexArray(0); //unbind -- unnecissary state switch?
				glBegin(GL_TRIANGLES);
				glVertex3f(0, 0, 0);
				glVertex3f(1, 0, 0);
				glVertex3f(1, 1, 0);
				glEnd();

		SDL_GL_SwapBuffers();
	}
	return 0;
}

void motor::Game::update()
{

}

void motor::Game::draw()
{

}

void motor::Game::init()
{

}

void motor::Game::load()
{

}

void motor::Game::unload()
{

}
