#include "game.hpp"

struct vertex
{
	vertex
		(
		 glm::vec3 const & Position,
		 glm::vec2 const & Texcoord
		) :
			Position(Position),
			Texcoord(Texcoord)
	{}

	glm::vec3 Position;
	glm::vec2 Texcoord;
};

motor::Game::Game(): background("data/background.png"),	logo("data/logo.png")
{
	loop = true;
}

motor::Shader *shader;
void init_shader()
{
	shader = new motor::Shader();
	shader->init();

	shader->attachVertexShader("data/base.vert");
	shader->attachFragmentShader("data/base.frag");
	shader->compile();
	shader->activate();
}

unsigned int vertexBuffer;
unsigned int elementBuffer;
void init_buffers()
{
	GLsizei const VertexCount = 6;
	GLsizeiptr const VertexSize = VertexCount * sizeof(vertex);
	vertex const VertexData[VertexCount] =
	{
		vertex(glm::vec3(-1.0f,-1.0f, 1.0f), glm::vec2(0.0f, 1.0f)),
		vertex(glm::vec3( 1.0f,-1.0f, 0.0f), glm::vec2(1.0f, 1.0f)),
		vertex(glm::vec3( 1.0f, 1.0f, 0.0f), glm::vec2(1.0f, 0.0f)),
		vertex(glm::vec3( 1.0f, 1.0f, 0.0f), glm::vec2(1.0f, 0.0f)),
		vertex(glm::vec3(-1.0f, 1.0f, 0.0f), glm::vec2(0.0f, 0.0f)),
		vertex(glm::vec3(-1.0f,-1.0f, 0.0f), glm::vec2(0.0f, 1.0f))
	};

	glGenBuffers(1, &vertexBuffer);
	glBindBuffer(GL_ARRAY_BUFFER, vertexBuffer);
	glBufferData(GL_ARRAY_BUFFER, VertexSize, VertexData, GL_STATIC_DRAW);
	glBindBuffer(GL_ARRAY_BUFFER, 0);
}

#define _OFFSET(i) ((char *)NULL + (i))

int motor::Game::main(Window *wndw, Input *inp)
{
	window = wndw;
	input = inp;

	cout << sizeof(glm::vec2) << endl;
	cout << sizeof(glm::vec3) << endl;
	cout << SDL_GetTicks() << endl;
	Chunk *chk = new Chunk(16 * 4, 16 * 4, 16 * 4);
	//chk->set(10, 10, 10, 5);
	//cout << (int)chk->get(10, 10, 10).type << endl;
	cout << chk->calculateVisibleSides() << endl;
	cout << SDL_GetTicks() << endl;

	init_shader();
	int projectionMatrixUniform;
	int viewMatrixUniform;
	int modelMatrixUniform;
	int texUniform;
	texUniform = shader->getUniformLocation("texture");
	int positionAttrib;
	int texcoordAttrib;
	positionAttrib = shader->getAttributeLocation("position");
	texcoordAttrib = shader->getAttributeLocation("texcoord");
	//or just bind them to a location
	//glBindAttribLocation(shader->getProgram(), 0, "position");
	//glBindAttribLocation(shader->getProgram(), 4, "texcoord");

	glm::mat4 projectionMatrix;
	glm::mat4 viewMatrix;
	glm::mat4 modelMatrix;

	projectionMatrixUniform = shader->getUniformLocation("projectionMatrix");
	viewMatrixUniform = shader->getUniformLocation("viewMatrix");
	modelMatrixUniform = shader->getUniformLocation("modelMatrix");

	projectionMatrix = glm::perspective(120.0f, float(window->width) / float(window->height), window->near, window->far); //https://secure.wikimedia.org/wikipedia/en/wiki/Field_of_view
	//projectionMatrix = glm::perspective(45.0f, 4.0f / 3.0f, window->near, window->far); 
	viewMatrix = glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, 2.0f, -15.0f));
	viewMatrix = glm::rotate(viewMatrix, 30.0f, glm::vec3(1.0f, 1.0f, 0.0f));
	modelMatrix = glm::mat4(1.0f);//glm::scale(glm::mat4(1.0f), glm::vec3(1.0f));//model matrix, halve size of model
	init_buffers();

	glEnable(GL_TEXTURE_2D);
	glActiveTexture(GL_TEXTURE0);
	Image image("data/placeholder.png");

	while(loop)
	{
		input->update(window);
		if(input->quit())
			return 0;
		if(input->windowResized())
		{
			cout << "handled!" << window->width << " " << window->height << endl;
			projectionMatrix = glm::perspective(45.0f, float(window->width) / float(window->height), window->near, window->far); 
		}

		//delta += 0.31f;

		glUniformMatrix4fv(projectionMatrixUniform, 1, GL_FALSE, glm::value_ptr(projectionMatrix));
		glUniformMatrix4fv(viewMatrixUniform, 1, GL_FALSE, glm::value_ptr(viewMatrix));
		glUniformMatrix4fv(modelMatrixUniform, 1, GL_FALSE, glm::value_ptr(modelMatrix));

		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		glUniform1i(texUniform, 0);
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, image.data);

		/*
		 * void glVertexAttribPointer(	GLuint  	index,
		 * 	GLint	size,
		 * 	GLenum  	type,
		 * 	GLboolean  	normalized,
		 * 	GLsizei  	stride,
		 * 	const GLvoid *  	pointer);
		 */
		glBindBuffer(GL_ARRAY_BUFFER, vertexBuffer);
		glVertexAttribPointer(positionAttrib, 3, GL_FLOAT, GL_FALSE, sizeof(vertex), _OFFSET(0));
		glVertexAttribPointer(texcoordAttrib, 2, GL_FLOAT, GL_FALSE, sizeof(vertex), _OFFSET(sizeof(glm::vec3)));
		glBindBuffer(GL_ARRAY_BUFFER, 0);

		glEnableVertexAttribArray(positionAttrib);
		glEnableVertexAttribArray(texcoordAttrib);

		glDrawArrays(GL_TRIANGLES, 0, 6); //6 -> VertexCount

		SDL_GL_SwapBuffers();
	}
	return 0;
}

void motor::Game::update()
{

}

void motor::Game::draw()
{

}

void motor::Game::init()
{

}

void motor::Game::load()
{

}

void motor::Game::unload()
{

}
